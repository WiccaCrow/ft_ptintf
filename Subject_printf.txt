printf
Потому что putnbr и putstr недостаточно
Резюме: этот проект довольно простой. Вы перекодируете printf. Надеюсь, вы сможете повторно использовать его в будущем проекте, не опасаясь быть отмеченным как читер.
В основном вы узнаете, как использовать вариативные аргументы.

_______________________________

Содержание

I Введение .....................2
II Общие инструкции ............3
III Обязательная часть .........4
IV Бонус, часть ................5

_______________________________

Глава I 


Введение

Универсальность функции printf в C представляет для нас отличное упражнение в программировании. Этот проект средней сложности. Это позволит вам открыть для себя вариативные функции в C.
Ключ к успеху ft_printf - это хорошо структурированный и хорошо расширяемый код.

_______________________________

Глава II.

Общие инструкции

• Ваш проект должен быть написан в соответствии с Нормой. Если у вас есть бонусные файлы / функции, они включены в проверку нормы, и вы получите 0, если внутри есть ошибка нормы.

• Ваши функции не должны завершаться неожиданно (ошибка сегментации, ошибка шины, двойное освобождение и т.д.), за исключением неопределенного поведения. Если это произойдет, ваш проект будет считаться нефункциональным и получит 0 во время оценки.

• Все пространство памяти, выделенное кучей, должно быть должным образом освобождено при необходимости. Утечки недопустимы.

• Если субъект требует этого, вы должны отправить Makefile, который скомпилирует ваши исходные файлы в требуемый вывод с флагами -Wall, -Wextra и -Werror, и ваш Makefile не должен повторно связываться.

• Ваш Makefile должен содержать как минимум правила $ (NAME), all, clean, fclean и re.

• Чтобы превратить бонусы в свой проект, вы должны включить бонус правила в свой Makefile, который добавит все различные заголовки, библиотеки или функции, запрещенные в основной части проекта. Бонусы должны быть в другом файле _bonus. {C / h}.
Оценка обязательной и бонусной части проводится отдельно.

• Если ваш проект позволяет вам использовать ваш libft, вы должны скопировать его исходный код и связанный с ним Makefile в папку libft с соответствующим Makefile. Makefile вашего проекта должен скомпилировать библиотеку, используя свой Makefile, а затем скомпилировать проект.

• Мы рекомендуем вам создавать программы тестирования для вашего проекта, даже если эту работу не нужно будет отправлять и оценивать. Это даст вам возможность легко проверить свою работу и работу ваших коллег. Вы найдете эти тесты особенно полезными во время защиты. Действительно, во время защиты вы можете использовать свои тесты и / или тесты партнера, которого вы оцениваете.

• Отправьте свою работу в назначенный репозиторий git. Оцениваться будет только работа в репозитории git. Если DeepThreadt назначен для оценки вашей работы, это будет сделано после ваших оценок коллег. Если во время выставления оценок Deepoughtt в каком-либо разделе вашей работы произойдет ошибка, оценка остановится.

______________________________________

Глава III.

Обязательная часть

___________________________________________________________________
Название программы    |    libftprintf.a
______________________|____________________________________________
Сдаваемые файлы.      |     *.c, */*.c, *.h, */*.h, Makefile 
______________________|____________________________________________
Makefile 	      |     all, clean, fclean, re, bonus     
______________________|____________________________________________
Внешние функции.      | malloc, free, write, va_start, va_arg, 
		      | va_copy, va_end
______________________|____________________________________________
Libft одобрена 	      |     да     
______________________|____________________________________________
Описание              |   Напишите библиотеку, содержащую ft_printf, 
		      |   функцию, которая имитирует реальный printf 
______________________|____________________________________________

• Прототип ft_printf должен быть int ft_printf (const char *, ...);

• Вам необходимо перекодировать функцию printf библиотеки libc

• Он не должен управлять буфером, как настоящий printf

• Он будет управлять следующими преобразованиями: cspdiuxX%

• Он будет управлять любой комбинацией следующих флагов: ’-0.*’ И минимальная ширина поля со всеми преобразованиями

• Он будет сравнен с реальным printf

• Вы должны использовать команду ar для создания вашей библиотеки, использование команды libtool запрещено.

man 3 printf / man 3 stdarg

______________________________________________________________________
______________________________________________________________________

Глава IV.

Бонусная часть


• Если обязательная часть не идеальна, даже не думайте о бонусах

• Не обязательно использовать все бонусы

• Управляйте одним или несколькими из следующих преобразований: nfge

• Установите один или несколько из следующих флагов: l ll h hh

• Управляйте всеми следующими флагами: ’# +’ (да, один из них - пробел)